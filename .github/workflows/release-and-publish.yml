name: Release and Publish

on:
  workflow_dispatch:

env:
  LAST_VERSION:
  NEXT_VERSION:
  PUBLISH_IMAGE:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  release-and-publish:
    permissions:
      contents: write # to be able to publish a GitHub release
      packages: write # to be able to upload a registry image
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup npm\npx
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install semantic-release and dependencies
        run: npm install semantic-release@v24 @semantic-release/exec@v6 -D conventional-changelog-conventionalcommits@v8

      # Need the dry-run to get the next version # BEFORE running the formal semantic release
      - name: Run Semantic Release (dry-run)
        run: npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Retrieve Semantic Release Dry-Run Output
        run: |
          echo 'LAST_VERSION = "${{ env.LAST_VERSION }}"'
          echo 'NEXT_VERSION = "${{ env.NEXT_VERSION }}"'
          if [ "${{ env.LAST_VERSION }}" != "${{ env.NEXT_VERSION }}" ]; then
            echo "PUBLISH_IMAGE=true" >> $GITHUB_ENV
            echo 'PUBLISH_IMAGE = "true"'
          else
            echo "PUBLISH_IMAGE=false" >> $GITHUB_ENV
            echo 'PUBLISH_IMAGE = "false"'
          fi

      # Update source code files where version is currently hardcoded BEFORE the real semantic-release is executed.
      # This allows the release assets to be created using correctly versioned source code files.
      # This source code version update is also leveraged during docker image creation.
      - name: Update Local VERSION file (Conditional)
        if: ${{ env.PUBLISH_IMAGE == 'true' }}
        run: |
          sed -i 's/1\.x\.x/${{ env.NEXT_VERSION }}/g' ./cmd/cfm-cli/cmd/root.go
          sed -i 's/1\.x\.x/${{ env.NEXT_VERSION }}/g' ./cmd/cfm-service/main.go
          sed -i 's/1\.x\.x/${{ env.NEXT_VERSION }}/g' ./cmd/cxl-host/service/parameters.go
          sed -i 's/1\.x\.x/${{ env.NEXT_VERSION }}/g' ./webui/package.json

      # Test build to just make sure that it runs.
      #TODO: Remove once CI\CD matures.
      - name: Test Docker Build Local (Conditional)
        if: ${{ env.PUBLISH_IMAGE == 'true' }}
        run: |
          docker build --no-cache -t ${{ env.CFM_TEST_VERSION }} ./docker/.
          docker rmi ${{ env.CFM_TEST_VERSION }}
        env:
          CFM_TEST_VERSION: cfm-test:v${{ env.NEXT_VERSION }}

      # Manually create the GitHub Release assets for upload.  Wanted them versioned.
      - name: Create distribution assets (Conditional)
        if: ${{ env.PUBLISH_IMAGE == 'true' }}
        run: |
          mkdir -p /tmp/dist
          zip -r /tmp/dist/cfm-${{ env.NEXT_VERSION }}-test.zip . -x "./node_modules/*" -x "./.git/*"
          tar --exclude='./node_modules' --exclude='./.git'  -czf /tmp/dist/cfm-${{ env.NEXT_VERSION }}-test.tar.gz .

      - name: Run Semantic Release (Conditional)
        if: ${{ env.PUBLISH_IMAGE == 'true' }}
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Container Registry Login (Conditional)
        if: ${{ env.PUBLISH_IMAGE == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Image Build (Conditional)
        if: ${{ env.PUBLISH_IMAGE == 'true' }}
        run: docker build --no-cache -t ${{ env.CFM_NEXT_VERSION }} -t ${{ env.CFM_LATEST_VERSION }} ./docker/Dockerfile
        env:
          CFM_NEXT_VERSION: ${{ env.IMAGE_NAME }}:v${{ env.NEXT_VERSION }}
          CFM_LATEST_VERSION: ${{ env.IMAGE_NAME }}:latest

      - name: Docker Image Publish (Conditional)
        if: ${{ env.PUBLISH_IMAGE == 'true' }}
        run: docker push --all-tags ${{ env.IMAGE_NAME }}
